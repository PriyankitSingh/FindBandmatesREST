package nz.ac.auckland.musician.services;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

import javax.ws.rs.Path;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import nz.ac.auckland.parolee.domain.Parolee;
import nz.ac.auckland.parolee.services.ParoleeResource;

@Path("/musicians")
public class MusicianResource {
	// Setup a Logger.
		private static Logger _logger = LoggerFactory
				.getLogger(ParoleeResource.class);

		// Thread-safe data structure. This is necessary because a single
		// ParoleeResource instance will be created and used to handle all incoming
		// requests. The JAX-RS implementation uses a thread-per-request model and
		// so concurrent requests will concurrently access the ParoleeResource 
		// object.
		// A list of all musicians in the system
		private Map<Integer, Parolee> musicianDB = new ConcurrentHashMap<Integer, Parolee>();
		
		// A counter to keep track of how many ids have been allocated to 
		//avoid having multiple users with the same ID
		private AtomicInteger idCounter = new AtomicInteger();
}
